// Generated by CoffeeScript 1.3.3
var ActivityLegView, ActivityView, BaseActivityView, DayView, MiniActivityView, PlanEditor, PlanInfoView, Schedule, ScheduleMapView, ScheduleView, WidgetCityView, WidgetErrorBlockerView, WidgetPlaceView, WidgetView;

window.TARGET_WB = -1;

window.DEFAULT_CITY_ID = "36";

_.mixin({
  groupOneBy: function(list, iterator) {
    var id2arr, id2obj;
    id2arr = _.groupBy(list, iterator);
    id2obj = {};
    _.each(_.keys(id2arr), function(id) {
      return id2obj[id] = id2arr[id][0];
    });
    return id2obj;
  }
});

PlanEditor = function(pland) {
  this.enable_logging = function(enabled) {
    if (typeof window.console === "undefined") {
      return window.console = {
        log: function() {},
        error: function() {}
      };
    } else if (!(enabled && (window.console.log != null) && (window.console.error != null))) {
      return window.console.log = window.console.error = function() {};
    }
  };
  this.init = function() {
    this.enable_logging(pland.debugging);
    this.id2ac_attr = _.groupOneBy(pland.activities, 'id');
    this.uid2place = _.groupOneBy(pland.places, 'uid');
    this.is_author = pland.is_author;
    this.plan_id = pland.plan_info.id;
    this.schedule = new Schedule(pland.days);
    this.wishlist = new WishList(pland.wish_places);
    this.info = new PlanInfo(pland.plan_info);
    this.wishlist.classify_wps();
    this.info.reset_all_acs();
    this.gs = new GoogleService();
    this.plan_info_view = new PlanInfoView({
      model: this.info
    });
    this.schedule_view = new ScheduleView({
      model: this.schedule
    });
    this.widget_view = new WidgetView;
    this.main_view = new PlanEditorView();
    this.main_view.initialize();
    if (google_is_defined()) {
      this.schedule_map_view = new ScheduleMapView;
      $(this.schedule_map_view.el).appendTo($(".schedule-map-container"));
    } else {
      console.log('google map loading failed');
      this.schedule_map_view = {
        render_acs: function() {},
        render: function() {}
      };
    }
    this.wishlist_view = new WishListView({
      model: this.wishlist
    });
    this.mini_wishlist_view = new MiniWishListView({
      model: this.wishlist
    });
    this.plan_info_view.render();
    this.wishlist_view.render();
    this.mini_wishlist_view.render();
    return this.schedule_view.addAll();
  };
  this.get_current_offset = function() {
    return this.schedule_view.currentOffset;
  };
  this.unload = function() {
    var b;
    b = "/plans/" + pland.plan_id + "/api/cleanup/";
    return $.ajax({
      type: "POST",
      url: b,
      async: !1
    });
  };
  this.show_autosave_indicator = function() {
    return this.plan_info_view.show_autosave_indicator();
  };
  this.show_autosave_error = function() {
    console.error.apply(console, arguments);
    return this.widget_view.widget_error_blocker.propagate();
  };
  this.ajax_save = function(op_name, ajax_opts) {
    var me, _ref;
    me = this;
    if ((_ref = ajax_opts.contentType) == null) {
      ajax_opts.contentType = 'application/json';
    }
    return $.ajax(ajax_opts).done(function() {
      console.log("" + op_name + " done", ajax_opts);
      return me.show_autosave_indicator();
    }).fail(function(err) {
      return me.show_autosave_error("Fail to " + op_name + ", " + err.status + " " + err.statusText + ": " + err.responseText);
    });
  };
  this.change_day_city = function(day_index, city_index) {
    var acs_res;
    acs_res = this.schedule.get_render_acs(day_index, city_index);
    if (city_index != null) {
      editor.main_view.toggle_current_day(false);
    }
    this.schedule_view.calendar_to(acs_res.day_index);
    return this.schedule_map_view.render_acs(day_index, acs_res.city_indexes, acs_res.days);
  };
  this.create_ac_by_place = function(place) {
    var _base, _name, _ref;
    if ((_ref = (_base = this.uid2place)[_name = place.uid]) == null) {
      _base[_name] = place;
    }
    return new Activity({
      place_id: place.id,
      place_type: place.type,
      auto: place.auto || false
    });
  };
  this.confirm_box = function($btn, text, callback) {
    return $btn.jgrowl({
      text: text,
      title: "请确认",
      persistent: true,
      confirm: true,
      el: $btn,
      callback: function() {
        return callback();
      }
    });
  };
  return this;
};

window.PlanInfo = Backbone.Model.extend({
  initialize: function() {
    this.schedule = window.editor.schedule;
    this.wishlist = editor.wishlist;
    this.plan_id = window.editor.plan_id;
    this.url = "/api/plans/" + window.editor.plan_id;
    this.activities = {};
    this.legs = {};
    this.save_detail = _.debounce(this._save_detail, 200);
    this.schedule.bind('remove add change reset', this.save_detail, this);
    return this.wishlist.bind('remove add change reset', this.save_detail, this);
  },
  reset_all_acs: function() {
    this.wishlist.map(function(wp) {
      return wp.set('uses_count', 0, {
        silent: true
      });
    });
    this.activities = {};
    return this.schedule.add_all_acs({
      silent: true
    });
  },
  remove_ac: function(ac, options) {
    var wp;
    if (this.activities[ac.id]) {
      delete this.activities[ac.id];
      wp = this.wishlist.get(ac.get_place().uid);
      return wp.set('uses_count', Math.max(0, wp.get('uses_count') - 1), options);
    }
  },
  add_ac: function(ac, options) {
    var place, wp;
    if (!this.activities[ac.id]) {
      place = ac.get_place();
      this.activities[ac.id] = ac;
      wp = this.wishlist.add_place(place, options);
      return wp.set('uses_count', wp.get('uses_count') + 1, options);
    }
  },
  get_place_acs: function(place_uid) {
    return _.filter(_.values(this.activities), function(ac) {
      return ac.get_place_uid() === place_uid;
    });
  },
  get_city_acs: function(city_id) {
    return _.filter(_.values(this.activities), function(ac) {
      return ac.get_place().city_id === city_id;
    });
  },
  cities: function() {
    var citys;
    citys = {};
    _.each(this.activities, function(a) {
      var city_id, city_name, place;
      place = a.get_place();
      city_id = place.city_id;
      city_name = place.city_name;
      if (citys[city_id]) {
        return;
      }
      return citys[city_id] = {
        slug: city_id,
        value: city_id,
        name: city_name,
        label: city_name,
        name_en: city_name,
        place_class: "Area"
      };
    });
    return citys;
  },
  _save_detail: function() {
    var detail, no_empty_aid;
    detail = {
      days: this.schedule.toJSON(),
      wish_places: this.wishlist.toJSON()
    };
    no_empty_aid = _.every(detail.days, function(day) {
      return _.every(day.aids, function(aid) {
        return aid != null;
      });
    });
    if (!no_empty_aid) {
      console.log('Skip save plan detail due to undefined ac id');
      return;
    }
    return editor.ajax_save('save plan detail', {
      type: "PUT",
      url: this.url,
      data: JSON.stringify({
        detail: detail
      })
    });
  }
});

window.Activity = Backbone.Model.extend({
  defaults: {
    id: null,
    note: '',
    place_id: null,
    place_type: null,
    stay_hours: null,
    auto: false
  },
  get_container: function() {
    var _ref;
    return (_ref = this.collection) != null ? _ref.day.get('container') : void 0;
  },
  get_stay_hours: function() {
    if (this.get('place_type') === 'hotel') {
      return 0;
    } else {
      return this.get('stay_hours') || parseFloat(this.get_place().stay_hours || 2);
    }
  },
  get_place: function() {
    var uid;
    uid = this.get_place_uid();
    return editor.uid2place[uid];
  },
  get_place_uid: function() {
    var uid;
    return uid = "" + (this.get('place_type')) + "_" + (this.get('place_id'));
  },
  is_hotel: function() {
    return this.get('place_type') === 'hotel';
  },
  methodUrl: function(a) {
    switch (a) {
      case "create":
        return this.url;
      default:
        return this.url + this.get("id");
    }
  },
  initialize: function() {
    this.url = "/api/plans/" + window.editor.plan_id + "/activities/";
    this.bind("change", function() {
      return editor.show_autosave_indicator();
    });
    return this.bind('destroy', function(m) {
      return editor.info.remove_ac(m);
    });
  },
  sync: function(a, b, c) {
    b.methodUrl && b.methodUrl(a.toLowerCase()) && (c = c || {}, c.url = b.methodUrl(a.toLowerCase()));
    return Backbone.sync(a, b, c);
  }
});

window.ActivityLeg = Backbone.Model.extend({
  defaults: {
    id: null,
    distance: null,
    duration: null,
    steps: {}
  }
});

window.ActivityList = Backbone.Collection.extend({
  model: Activity
});

window.DayActivity = Backbone.Model.extend({
  defaults: {
    id: null,
    container: 0,
    note: "",
    aids: []
  },
  parse: function(attrs) {
    return _.pick(attrs, _.keys(this.defaults));
  },
  methodUrl: function(a) {
    return this.url + this.get("id");
  },
  initialize: function(attrs, options) {
    var acs, me;
    me = this;
    if (attrs == null) {
      attrs = {
        aids: []
      };
    }
    this.url = "/api/plans/" + window.editor.plan_id + "/days/";
    acs = _.map(attrs.aids, function(aid) {
      return editor.id2ac_attr[aid];
    });
    this.activities = new ActivityList(acs);
    this.activities.day = this;
    this.activities.bind('reset', this.add_all_acs, this);
    this.activities.bind('add', this.add_ac, this);
    this.bind("remove", this.remove, this);
    this.bind("change", function() {
      return editor.show_autosave_indicator();
    });
    this.activities.bind('reset add remove', function() {
      me.reset_aids();
      return me.change_activities();
    });
    return this.change_activities();
  },
  change_activities: function() {
    var non_hotel_i;
    non_hotel_i = 0;
    return this.activities.each(function(ac, i) {
      if (ac.is_hotel()) {
        return ac.pin_letter = 'H';
      } else {
        ac.pin_letter = non_hotel_i + 1;
        return non_hotel_i += 1;
      }
    });
  },
  add_ac: function(ac, options) {
    var hotel_id;
    if (!editor.info.activities[ac.id]) {
      if (ac.is_hotel() && !ac.get('auto')) {
        hotel_id = ac.get('place_id');
        _.each(editor.info.activities, function(ac) {
          if (ac.is_hotel() && ac.get('place_id') === hotel_id) {
            ac.set('auto', false, {
              silent: true
            });
            if (ac.hasChanged('auto')) {
              return ac.save({}, {
                silent: true
              });
            }
          }
        });
      }
      return editor.info.add_ac(ac, options);
    }
  },
  add_all_acs: function(options) {
    var me;
    me = this;
    return this.activities.each(function(ac) {
      return me.add_ac(ac, options);
    });
  },
  reset_activities: function(acs, silent_level) {
    var silent_ac, silent_aid;
    if (silent_level == null) {
      silent_level = 0;
    }
    silent_ac = (silent_level > 0 ? true : false);
    silent_aid = (silent_level === 2 ? true : false);
    this.activities.reset(acs, {
      silent: silent_ac
    });
    if (silent_ac) {
      this.reset_aids({
        silent: silent_aid
      });
      return this.change_activities();
    }
  },
  reset_aids: function(options) {
    var aids;
    aids = this.activities.pluck('id');
    return this.set('aids', this.activities.pluck('id'), options);
  },
  remove: function() {
    console.log("remove model " + this.id);
    return this.destroy();
  },
  sync: function(method, model, options) {
    model.methodUrl && model.methodUrl(method.toLowerCase()) && (options = options || {}, options.url = model.methodUrl(method.toLowerCase()));
    return Backbone.sync(method, model, options);
  }
});

window.WishPlace = Backbone.Model.extend({
  defaults: {
    id: null,
    place_type: null,
    place_id: null,
    uses_count: 0
  },
  get_place: function() {
    return Activity.prototype.get_place.apply(this, arguments);
  },
  get_place_uid: function() {
    return Activity.prototype.get_place_uid.apply(this, arguments);
  },
  create_ac: function(options) {
    var ac, me, _ref, _ref1;
    if (options == null) {
      options = {};
    }
    if ((_ref = options.success) == null) {
      options.success = function(model) {};
    }
    if ((_ref1 = options.error) == null) {
      options.error = function(model) {
        console.log('Fail to create activity, destroy');
        return model.destroy();
      };
    }
    me = this;
    ac = new Activity({
      place_type: this.get('place_type'),
      place_id: this.get('place_id')
    });
    ac.save({}, options).done(function() {
      var day, _ref2;
      day = (_ref2 = ac.collection) != null ? _ref2.day : void 0;
      if (!day) {
        console.log('ac created but not in any day, ignore');
        return;
      }
      console.log("Activity created, reset aids for day " + (day.get('container')) + " and add to info.activities");
      day.add_ac(ac);
      return day.reset_aids();
    });
    return ac;
  }
});

window.WishList = Backbone.Collection.extend({
  model: WishPlace,
  cities_wps: [],
  city_count: 0,
  place_count: 0,
  initialize: function() {
    return this.bind('add remove reset', this.classify_wps, this);
  },
  add_place: function(place, options) {
    var wp, _base, _name, _ref;
    wp = this.get(place.uid);
    if (!wp) {
      wp = new WishPlace({
        id: place.uid,
        place_type: place.type,
        place_id: place.id,
        uses_count: 0
      });
      if ((_ref = (_base = editor.uid2place)[_name = place.uid]) == null) {
        _base[_name] = place;
      }
      this.add(wp, options);
    }
    return wp;
  },
  classify_wps: function() {
    var cities_wps;
    console.log('re classify wish places', this.models);
    cities_wps = _.values(this.groupBy(function(wp) {
      return wp.get_place().city_id;
    }));
    console.log(cities_wps);
    this.cities_wps = _.map(cities_wps, function(city_wps) {
      return _.extend({
        city_id: city_wps[0].get_place().city_id,
        city_name: city_wps[0].get_place().city_name,
        count: city_wps.length,
        hotels: [],
        attractions: [],
        restaurants: []
      }, _.groupBy(city_wps, function(wp) {
        return wp.get('place_type') + 's';
      }));
    });
    this.city_count = this.cities_wps.length;
    this.place_count = _.sum(_.map(this.cities_wps, function(city_wps) {
      return city_wps.count;
    }));
    return console.log(this.cities_wps);
  },
  get_city_wish_places: function(city_id) {
    var city_wps;
    return city_wps = _.find(this.cities_wps, function(city) {
      return city.city_id === city_id;
    });
  },
  get_city_wish_places_by_type: function(city_id, place_type) {
    var city_wps;
    city_wps = _.find(this.cities_wps, function(city) {
      return city.city_id === city_id;
    });
    if (city_wps) {
      return city_wps["" + place_type + "s"];
    } else {
      return [];
    }
  },
  remove_city_wps: function(city_id) {
    var wps;
    wps = this.reject(function(wp) {
      return wp.get_place().city_id === city_id;
    });
    return this.reset(wps);
  }
});

window.MiniWishListView = Backbone.View.extend({
  el: '.wl_switch',
  events: {
    'click #add-place': 'add_wish_place'
  },
  initialize: function() {
    this.wishlist = this.model;
    this.$city_count = this.$('#city_count');
    this.$place_count = this.$('#place_count');
    return this.model.bind('reset add remove', this.render, this);
  },
  add_wish_place: function() {
    var wl_view;
    console.log('add wish place');
    wl_view = editor.wishlist_view;
    return editor.widget_view.widget_city.propagate(wl_view.current_city_id, wl_view.current_place_type);
  },
  render: function() {
    console.log('mini wishlist view render');
    this.$city_count.text(this.wishlist.city_count);
    return this.$place_count.text(this.wishlist.place_count);
  }
});

window.WishListView = Backbone.View.extend({
  el: '.wl_popup',
  current_city_id: null,
  current_place_type: 'attraction',
  events: {
    'click ul.tab.city li': 'switch_city',
    'click ul.tab.type li': 'switch_type',
    'click ul.tab.city span.remove': 'delete_city'
  },
  initialize: function() {
    this.wishlist = this.model;
    this.$city_tab_template = _.template($('#wishlist-city-tab-template').html());
    this.$type_tab_template = _.template($('#wishlist-type-tab-template').html());
    this.$wps_container = this.$('.city-places ul.list');
    this.$city_tab = this.$('ul.tab.city');
    this.$type_tab = this.$('ul.tab.type');
    this.add_to_draggable();
    return this.model.bind('reset add remove', this.render, this);
  },
  switch_city: function(ev) {
    this.current_city_id = $(ev.currentTarget).data('city_id') + '';
    return this.render();
  },
  switch_type: function(ev) {
    this.current_place_type = $(ev.currentTarget).data('place_type');
    return this.render();
  },
  delete_city: function(ev) {
    var $btn, city_id, city_name;
    $btn = $(ev.currentTarget);
    city_id = $btn.parent().data('city_id') + '';
    city_name = $btn.parent().data('city_name') + '';
    editor.confirm_box($btn, "删除" + city_name + "的所有景点和活动？", function() {
      var acs;
      acs = editor.info.get_city_acs(city_id);
      _.each(acs, function(ac) {
        return ac.destroy();
      });
      editor.wishlist.remove_city_wps(city_id);
      return console.log("city " + city_id + ", wps, and " + acs.length + " acs removed");
    });
    return false;
  },
  render_summary: function() {
    var cities_stats, city_wps, me, type2name, types_stats;
    me = this;
    type2name = {
      attraction: '景点',
      hotel: '酒店',
      restaurant: '餐饮'
    };
    if (!this.current_city_id && this.wishlist.cities_wps.length) {
      this.current_city_id = this.wishlist.cities_wps[0].city_id;
    }
    cities_stats = _.map(this.wishlist.cities_wps, function(city_wps) {
      var city_stat;
      return city_stat = {
        city_id: city_wps.city_id,
        city_name: city_wps.city_name,
        class_name: city_wps.city_id === me.current_city_id ? 'sel' : '',
        wp_count: city_wps.count
      };
    });
    city_wps = this.wishlist.get_city_wish_places(this.current_city_id) || {};
    types_stats = _.map(['attraction', 'hotel', 'restaurant'], function(place_type) {
      var _ref;
      return {
        place_type: place_type,
        place_type_name: type2name[place_type],
        class_name: place_type === me.current_place_type ? 'sel' : '',
        wp_count: ((_ref = city_wps["" + place_type + "s"]) != null ? _ref.length : void 0) || 0
      };
    });
    this.$city_tab.html(this.$city_tab_template({
      cities_stats: cities_stats
    }));
    return this.$type_tab.html(this.$type_tab_template({
      types_stats: types_stats
    }));
  },
  add_to_draggable: function() {
    var me;
    me = this;
    console.log('wishlist add to draggable');
    return this.$wps_container.find('> li').draggable({
      connectToSortable: 'dl.day ul.acs',
      appendTo: 'body',
      helper: 'clone',
      zIndex: 1000,
      revert: 'invalid',
      revertDuration: 200
    });
  },
  add_wp_view: function(wp) {
    var acv;
    acv = new ActivityView({
      model: wp,
      id: wp.cid,
      is_wp: true
    });
    return this.$wps_container.append(acv.render().el);
  },
  render_wps: function() {
    var acs, me;
    me = this;
    acs = this.wishlist.get_city_wish_places_by_type(this.current_city_id, this.current_place_type);
    console.log("render wish places for city " + this.current_city_id + ", type " + this.current_place_type + ", count " + acs.length);
    this.$wps_container.empty();
    _.each(acs, function(ac) {
      return me.add_wp_view(ac);
    });
    this.$wps_container.width(acs.length * 150);
    return this.add_to_draggable();
  },
  render: function() {
    this.render_summary();
    return this.render_wps();
  }
});

WidgetView = Backbone.View.extend({
  el: ".widget-container",
  events: {
    "click .widget": "propagate"
  },
  query_names: {
    1: "餐饮",
    2: "娱乐",
    4: "景点",
    5: "购物",
    restaurant: "餐饮",
    hotel: "酒店",
    entertainment: "娱乐",
    attraction: "景点",
    shopping: "购物"
  },
  search_api: "/api/cities/search",
  nav_history: [],
  initialize: function() {
    var a;
    a = this;
    this.search_place_cache = {};
    this.widget_city = new WidgetCityView;
    this.widget_place = new WidgetPlaceView;
    this.widget_error_blocker = new WidgetErrorBlockerView;
    window.editor.is_author || this.$(".invite").remove();
    this.$backdrop = $("<div id=\"widget-backdrop\" />").appendTo("body").click(function() {
      return a.presenting.close_on_blur && a.close();
    }).on("DOMMouseScroll", function(b) {
      return a.scroll(b);
    }).on("mousewheel", function(b) {
      return a.scroll(b);
    });
    this.$busy_overlay = $("<div class=\"busy-overlay\" />").appendTo("#widget-overlay");
    return this.$overlay = $("#widget-overlay").on("click", ".close", function() {
      return a.close();
    }).on("DOMMouseScroll", function(b) {
      return a.scroll(b);
    }).on("mousewheel", function(b) {
      return a.scroll(b);
    });
  },
  propagate: function(ev) {
    this.query_type = $(ev.currentTarget).data("type");
    if (this.query_type === "activity") {
      this.query_type = "attraction";
      this.widget_custom_activity.propagate();
      return;
    }
    if (this.query_type === 0) {
      this.widget_hotel.propagate();
      return;
    }
    this.query_name = this.query_names[this.query_type];
    this.widget_searchform.query_name = this.query_type;
    return this.widget_searchform.propagate();
  },
  search_place: function(a, b) {
    var c, d;
    c = a.term;
    if (c === "") {
      b(_.values(window.editor.info.cities()));
      return;
    }
    if (c in this.search_place_cache) {
      b(this.search_place_cache[c]);
      return;
    }
    d = this;
    return this.lastXhr = $.getJSON(this.search_api, a).success(function(a, e, f) {
      console.log("search_place success", a);
      a = _.reject(a, function(a) {
        return a.place_class === "Continent";
      });
      d.search_place_cache[c] = a;
      return d.lastXhr === f && b(a);
    }).error(function(a) {
      var data;
      console.error("search_place error", a);
      data = {
        name: "查询失败，请检查网络连接。",
        error: "error"
      };
      return d.lastXhr === a && b([data]);
    });
  },
  _renderAutocompleteItem: function(a, b) {
    var c;
    if (typeof b.parent_name === "undefined" || !(b.parent_name != null) || b.parent_name === "") {
      c = "<a>" + b.name + "</a>";
    } else {
      c = "<a>" + b.name + ", " + b.parent_name + "</a>";
    }
    return $("<li />").data("item.autocomplete", b).append(c).appendTo(a);
  },
  close: function() {
    this.loaded();
    this.scrolling = 0;
    this.$backdrop.hide();
    this.hide(this.presenting, "down");
    this.presenting = null;
    return this.nav_history = [];
  },
  loading: function() {
    return this.$busy_overlay.show();
  },
  loaded: function() {
    return this.$busy_overlay.hide();
  },
  scroll: function(a) {
    var b, c;
    if (!this.presenting.scrollable) {
      return;
    }
    this.scrolling = ++this.scrolling || 1;
    b = a.originalEvent;
    c = (b.wheelDelta ? b.wheelDelta * (window.opera ? -1 : 1) : b.detail * -1);
    c = (c > 0 ? 1 : -1);
    if (this.scrolling > 1) {
      this.scroll_dir && this.scroll_dir !== c && (this.scroll_dir = 0);
      return;
    }
    this.scroll_dir = c;
    return this.do_scroll();
  },
  do_scroll: function() {
    var a, b, c;
    a = this.scroll_dir;
    if (!a) {
      this.scrolling = 0;
      return;
    }
    b = this;
    c = $(b.presenting.el);
    if (c.offset().top > 30 && a === 1 || c.offset().top < $(window).height() - c.height() - 60 && a === -1) {
      return b.scrolling = 0;
    } else {
      return c.animate({
        "margin-top": "+=" + 60 * a
      }, 100, "linear", function() {
        return --b.scrolling && b.do_scroll();
      });
    }
  },
  slideIn: function(view, dir) {
    dir = dir || "up";
    this.$backdrop.show();
    this.presenting && this.hide(this.presenting, dir);
    this.show(view, dir);
    return this.presenting = view;
  },
  slideDir: {
    up: [0, -600],
    down: [0, 600],
    left: [-900, 0],
    right: [900, 0]
  },
  nav_prev: function() {
    var a;
    this.nav_history.pop();
    a = this.nav_history.pop();
    if (!a) {
      return;
    }
    if (a.slug) {
      return a.view.propagate(a.slug, "right");
    } else {
      return a.activity_id && a.view.edit(a.activity_id, "right");
    }
  },
  show: function(view, b) {
    var c, d, marginTop;
    c = this.slideDir[b][0];
    d = this.slideDir[b][1];
    _.isFunction(view.show) && view.show();
    marginTop = -Math.min($(view.el).height(), $(window).height()) / 2 + 20;
    return $(view.el).fadeTo(0, 0).css({
      left: $(window).width() / 2 + "px",
      top: $(window).height() / 2 + "px"
    }).animate({
      left: "-=" + c,
      top: "-=" + d
    }, 0).animate({
      left: "+=" + c,
      top: "+=" + d,
      opacity: 1
    }, 600, "linear").animate({
      left: "50%",
      top: "50%",
      "margin-top": marginTop
    }, 0);
  },
  hide: function(view, b) {
    var c, d;
    if (!view) {
      return;
    }
    c = this.slideDir[b][0];
    d = this.slideDir[b][1];
    return $(view.el).css({
      left: $(window).width() / 2 + "px",
      top: $(window).height() / 2 + "px"
    }).animate({
      left: "+=" + c,
      top: "+=" + d,
      opacity: 0
    }, 600, "linear").animate({
      left: "-9999px",
      top: "-9999px"
    }, 0, function() {
      _.isFunction(view.hide) && view.hide();
      return view.scrollable && $(view.el).css({
        "margin-top": "-300px"
      });
    });
  }
});

WidgetCityView = Backbone.View.extend({
  el: "#widget-city-view",
  events: {
    "click .tab": "switch_tab",
    "click .result-frame .prev": "scroll_up",
    "click .result-frame .next": "scroll_down",
    "click .place-add": "place_add",
    "click .chooseCity_popup a": "city_switch",
    "click .info .prev": "prev",
    "click .info .country": "nav_up",
    "click .info .desc .expand": "desc_expand",
    "click .info .desc .shrink": "desc_shrink"
  },
  api_base: "/api/cities/",
  scrollable: !0,
  initialize: function() {
    var me;
    me = this;
    this.cache = {
      cities: {}
    };
    this.$name_city = this.$(".chooseCity input");
    this.$name_country_zh = this.$(".info .country .name-zh");
    this.$name_country_en = this.$(".info .country .name-en");
    this.$name_city_zh = this.$(".info .city .name-zh");
    this.$name_city_en = this.$(".info .city .name-en");
    this.$city_link = this.$(".info .city me");
    this.$desc = this.$(".info .desc");
    this.$nav_prev = this.$(".info .prev");
    this.$tabs = this.$(".tab");
    this.$div = this.$(".results");
    this.$prev = this.$(".result-frame .prev");
    this.$next = this.$(".result-frame .next");
    this.$theme = this.$(".types .suggest-theme");
    this.$add_place = this.$(".types .add-place");
    this.place_template = _.template($("#widget-city-items-template").html());
    this.$searchbox = this.$(".searchbox input").autocomplete({
      appendTo: this.el,
      delay: 500,
      minLength: 0,
      source: function(me, b) {
        return window.editor.widget_view.search_place(me, b);
      },
      search: function(me, b) {
        if ($(this).data("autocomplete").preventAC) {
          $(this).data("autocomplete").preventAC = !1;
          return !1;
        }
      },
      focus: function(me, b) {
        $(this).data("autocomplete").preventAC = !0;
        $(this).val(b.item.name);
        return !1;
      },
      select: function(b, c) {
        me.jump(c.item);
        return !1;
      }
    }).focus(function() {
      return $(this).autocomplete("search");
    }).keyup(function() {
      return $(this).autocomplete("search");
    });
    return $(this.el).height("auto");
  },
  propagate: function(city_id, place_type, dir) {
    city_id = city_id || DEFAULT_CITY_ID;
    window.editor.widget_view.loading();
    dir = dir || "up";
    window.editor.widget_view.slideIn(this, dir);
    window.editor.widget_view.nav_history.push({
      slug: city_id,
      view: this
    });
    this.current_city = city_id;
    this.current_type = place_type;
    return this.render();
  },
  render: function() {
    var city, cpd, me;
    me = this;
    city = this.cache.cities[this.current_city];
    cpd = this.cache[this.current_city] || (this.cache[this.current_city] = {});
    cpd = cpd[this.current_type];
    if (editor.widget_view.nav_history.length > 1) {
      this.$nav_prev.show();
    } else {
      this.$nav_prev.hide();
    }
    this.$div.empty();
    if (!city || !cpd) {
      this.fetch();
      return;
    }
    this.$name_city.val(city.name);
    this.$city_link.attr("href", "/place/" + cpd.slug + "/");
    this.$desc.html(city.intro_short);
    this.$tabs.each(function() {
      return $(this).toggleClass("selected", $(this).data("type") === me.current_type);
    });
    this.render_place_list();
    this.scroll_to();
    return window.editor.widget_view.loaded();
  },
  render_place_list: function(places) {
    var $places_html;
    places = places || this.cache[this.current_city][this.current_type].items;
    this.cache.uid2place = _.groupOneBy(places, 'uid');
    $places_html = $(this.place_template({
      list: places
    }));
    window.editor.is_author || $(".place-add", $places_html).hide();
    $(".place-exists", $places_html).each(function() {
      var place_uid;
      place_uid = $(this).parents(".place-item").data("uid");
      if (editor.wishlist.get(place_uid)) {
        return $(this).addClass("shown");
      }
    });
    return this.$div.append($places_html);
  },
  fetch: function() {
    var me;
    me = this;
    return $.get(this.api_base + this.current_city).success(function(city) {
      city.intro_short = city.intro.slice(0, 75) + " ... <span class=\"expand\">(展开)</span>";
      city.intro = city.intro + "<span class=\"shrink\"> (收起)</span>";
      me.cache.cities[me.current_city] = city;
      return $.get(me.api_base + me.current_city + "/" + me.current_type + "s", {
        limit: 9
      }).success(function(data) {
        data.pages = 1;
        data.next_page = 2;
        me.cache[me.current_city][me.current_type] = data;
        return me.render();
      }).error(function(b) {
        console.error("fetch cities error", b);
        return me.connection_error();
      });
    }).error(function(b) {
      console.error("fetch city error", b);
      return me.connection_error();
    });
  },
  desc_expand: function() {
    var city;
    city = this.cache.cities[this.current_city];
    return this.$desc.html(city.intro);
  },
  desc_shrink: function() {
    var city;
    city = this.cache.cities[this.current_city];
    return this.$desc.html(city.intro_short);
  },
  scroll_up: function() {
    if (this.current_page === 1) {
      return;
    }
    this.scroll_to(--this.current_page);
    this.current_page === 1 && this.$prev.addClass("disabled");
    return this.$next.removeClass("disabled");
  },
  scroll_down: function() {
    var a;
    a = this.cache[this.current_city][this.current_type];
    if (this.current_page !== a.pages) {
      this.scroll_to(++this.current_page);
      this.$prev.removeClass("disabled");
      this.current_page === a.pages && !a.next_page && this.$next.addClass("disabled");
      return;
    }
    this.$next.addClass("disabled");
    return a.next_page && this.more();
  },
  scroll_to: function(a) {
    var b;
    b = 400;
    a || (a = this.current_page = 1, b = 0, this.$prev.addClass("disabled"), this.$next.removeClass("disabled"));
    return this.$div.animate({
      top: (a - 1) * -540 + "px"
    }, b);
  },
  more: function() {
    var a, b;
    a = this.cache[this.current_city][this.current_type];
    if (!a.next_page) {
      return;
    }
    b = this;
    return $.get(this.api_base + this.current_city + "/" + this.current_type + "s", {
      start: (a.next_page - 1) * 9,
      limit: 9
    }).success(function(c) {
      if (!c.items.length) {
        a.next_page = 0;
        return;
      }
      a.next_page++;
      a.pages++;
      a.items = a.items.concat(c.items);
      b.render_place_list(c.items);
      b.$next.removeClass("disabled");
      return b.scroll_down();
    }).error(function(b) {
      console.error("fetch more places error", b);
      return a.next_page = 0;
    });
  },
  connection_error: function() {
    $("<h3/>").addClass("connection-error").html("连接失败，请检查网络。").appendTo(this.$div);
    return window.editor.widget_view.loaded();
  },
  switch_tab: function(ev) {
    var b, d, me;
    b = $(ev.target);
    if (b.hasClass("selected")) {
      return;
    }
    this.$tabs.removeClass("selected");
    b.addClass("selected");
    this.$div.empty();
    this.scroll_to();
    me = this;
    this.current_type = b.data("type");
    d = this.cache[this.current_city];
    if (!d[this.current_type]) {
      $.get(this.api_base + this.current_city + "/" + this.current_type + "s").success(function(res) {
        res.pages = 1;
        res.next_page = 2;
        d[me.current_type] = res;
        return me.render_place_list(res.items);
      }).error(function(ev) {
        console.error("fetch cities error", ev);
        return me.connection_error();
      });
      return;
    }
    return this.render_place_list(d[this.current_type].items);
  },
  city_switch: function(ev) {
    var $a;
    $a = $(ev.target);
    this.current_city = $a.data("city_id");
    this.render();
    return false;
  },
  place_add: function(ev) {
    var $place, place, wp;
    if (!window.editor.is_author) {
      return;
    }
    $place = $(ev.currentTarget).parents(".place-item");
    place = this.cache.uid2place[$place.data('uid')];
    wp = editor.wishlist.add_place(place);
    return $(".place-exists", $place).addClass("shown");
  },
  jump: function(a) {
    this.$searchbox.val("").blur();
    this.$(".ui-autocomplete").hide();
    if (a.error) {
      return;
    }
    switch (a.place_class) {
      case "Country":
        return window.editor.widget_view.widget_country.propagate(a.slug, "right");
      case "Area":
        window.editor.widget_view.loading();
        window.editor.widget_view.nav_history.push({
          slug: a.slug,
          view: this
        });
        this.current_city = a.slug;
        return this.render();
      case "Place":
        return window.editor.widget_view.widget_place.propagate(a.slug, "left");
      default:
        return console.error("unhandled place_class", a.place_class, a);
    }
  },
  nav_up: function() {
    return window.editor.widget_view.widget_country.propagate(this.cache[this.current_city][this.current_type].parent_slug, "left");
  },
  prev: function() {
    return window.editor.widget_view.nav_prev();
  },
  next: function(a) {
    return window.editor.widget_view.widget_place.propagate($(a.currentTarget).parents(".place-item").data("slug"), "left");
  }
});

PlanInfoView = Backbone.View.extend({
  el: "#id-plan-info",
  events: {
    "click #id-plan-edit": "showTitleEdit",
    "click #id-auto-plan": "autoPlan",
    "click #id-preview": "preview",
    "click #id-plan-report span": "report_unreasonable_plan",
    'change input[name="start_day"]': "changeValue",
    'blur input[name="title"]': "hideTitleEdit"
  },
  initialize: function() {
    this.template = _.template($("#plan-info-template").html());
    this.model.bind("change", (function() {
      this.render();
      return this.show_autosave_indicator();
    }), this);
    return this.$autosave_indicator = this.$(".autosave-progress");
  },
  report_unreasonable_plan: function(ev) {
    var reason;
    reason = $(ev.target).siblings('textarea').val();
    if (!reason || reason === '请输入线路不合理原因') {
      return alert('请输入线路不合理原因');
    }
    return editor.ajax_save('report unreasonable plan', {
      type: "POST",
      url: "/api/plans/" + this.model.plan_id + "/copy",
      data: JSON.stringify({
        description: reason,
        title: "不合理快照: " + (this.model.get('title')),
        is_temp: 0,
        unreasonable: 1
      })
    }).then(function() {
      return alert('反馈成功, 可在个人中心中查看到此条快照线路');
    });
  },
  preview: function() {
    return window.location.href = "/plan/" + editor.info.plan_id + "/view";
  },
  showTitleEdit: function() {
    this.$title_span.hide();
    return this.$title.show().focus();
  },
  hideTitleEdit: function() {
    var title;
    title = this.$title.val();
    if (title) {
      this.$title_span.text(title);
    }
    this.$title_span.show();
    this.$title.hide();
    return this.changeValue();
  },
  changeValue: function() {
    this.model.set({
      start_day: this.$start.val(),
      title: this.$title.val()
    }, {
      silent: true
    });
    if (this.model.hasChanged()) {
      return this.model.save();
    }
  },
  render: function() {
    var a;
    a = this.model.toJSON();
    a.is_author = window.editor.is_author;
    $(this.el).html(this.template(a));
    this.$title = this.$('input[name="title"]');
    this.$title_span = this.$("span#title");
    this.$start = this.$('input[name="start_day"]');
    this.$start.datepicker({
      dateFormat: "yy-mm-dd",
      minDate: 0,
      maxDate: "+1Y"
    });
    return this;
  },
  show_autosave_indicator: function() {
    var a, b;
    a = (new Date).getTime();
    this.$autosave_indicator.length < 1 && (this.$autosave_indicator = this.$(".autosave-progress"));
    this.autosave_counter = this.autosave_counter || {
      count: 0
    };
    ({
      timestamp: a
    });
    b = a - this.autosave_counter.timestamp;
    if (this.autosave_counter.count++ > 5 && b > 1e4 || b > 3e4) {
      this.$autosave_indicator.find("img").show().delay(2e3).fadeOut(100).end().find("p").delay(2100).fadeIn(100).delay(2e3).fadeOut(700);
      this.autosave_counter.count = 0;
      return this.autosave_counter.timestamp = a;
    }
  },
  autoPlan: function(ev) {
    var acs, unused_acs, unused_wps;
    acs = _.values(window.editor.info.activities);
    unused_wps = editor.wishlist.filter(function(wp) {
      return wp.get('uses_count') === 0;
    });
    unused_acs = _.map(unused_wps, function(wp) {
      return new Activity(_.pick(wp.toJSON(), ['place_type', 'place_id']));
    });
    return autoplan.plan(acs.concat(unused_acs), true);
  }
});

BaseActivityView = Backbone.View.extend({
  initialize: function() {
    this.model.bind("change", this.render, this);
    return this.model.bind("destroy", this.remove, this);
  },
  remove: function() {
    return this.$el.remove();
  },
  deleteActivity: function() {
    var confirm_text, is_wp, m;
    if (!window.editor.is_author) {
      return;
    }
    is_wp = this.options.is_wp;
    m = this.model;
    if (is_wp) {
      console.log("remove wish place " + m.id);
    } else {
      console.log("remove ac " + m.id);
    }
    confirm_text = is_wp ? '真的要删除此地点？将删除所有关联的活动' : "真的要删除此活动？";
    return editor.confirm_box(this.$btn_remove, confirm_text, function() {
      var acs;
      if (is_wp) {
        acs = editor.info.get_place_acs(m.id);
        _.each(acs, function(ac) {
          return ac.destroy();
        });
        editor.wishlist.remove(m);
        return console.log("wp " + m.id + " and corresponding " + acs.length + " acs removed");
      } else {
        return m.destroy({
          error: function() {
            return console.log("Fail to remove ac " + m.id);
          }
        });
      }
    });
  },
  activityMouseEnter: function(a) {
    var b;
    b = this.model.get("id");
    return b && $("div.map").trigger("activity_enter", {
      aid: b
    });
  },
  activityMouseLeave: function(a) {
    var b;
    b = this.model.get("id");
    return b && $("div.map").trigger("activity_leave", {
      aid: b
    });
  },
  render: function() {
    var ac;
    ac = this.model.toJSON();
    ac.place = this.model.get_place();
    ac.is_author = window.editor.is_author;
    ac.place.url = "/" + ac.place_type + "/" + ac.place.city_id + "/detail/" + ac.place_id;
    if (!this.options.is_wp) {
      ac.pin_letter = this.model.pin_letter;
      ac.stay_hours = this.model.get_stay_hours();
    }
    this.$el.addClass(ac.place_type);
    this.$el.toggleClass('wp', this.options.is_wp === true);
    this.$el.attr('data-cid', this.model.cid);
    this.$el.html(this.template({
      activity: ac
    }));
    this.$btn_remove = this.$('span.remove');
    return this;
  }
});

ActivityView = BaseActivityView.extend({
  tagName: "li",
  className: 'ac normal',
  events: {
    "click span.remove": "deleteActivity",
    "mouseenter": "activityMouseEnter",
    "mouseleave": "activityMouseLeave",
    'click div.info p.text.stay a': 'showStayHoursEdit',
    'blur div.info p.text.stay input': 'hideStayHoursEdit'
  },
  initialize: function() {
    BaseActivityView.prototype.initialize.apply(this, arguments);
    return this.template = _.template($("#activity-template").html());
  },
  render: function() {
    BaseActivityView.prototype.render.apply(this, arguments);
    this.$stay_hours_span = this.$('div.info p.text.stay span');
    this.$stay_hours_input = this.$('div.info p.text.stay input');
    this.$stay_hours_a = this.$('div.info p.text.stay a');
    return this;
  },
  showStayHoursEdit: function(ev) {
    this.$stay_hours_span.hide();
    this.$stay_hours_input.show().focus();
    this.$stay_hours_a.hide();
    $('dl.day ul').sortable("option", "disabled", true);
    return false;
  },
  hideStayHoursEdit: function(ev) {
    var stay_hours;
    stay_hours = parseFloat(this.$stay_hours_input.val());
    if (stay_hours && !isNaN(stay_hours)) {
      this.$stay_hours_span.find('b').text(stay_hours + '');
    }
    this.$stay_hours_span.show();
    this.$stay_hours_input.hide();
    this.$stay_hours_a.show();
    $('dl.day ul').sortable("option", "disabled", false);
    this.model.set({
      stay_hours: parseFloat(this.$stay_hours_span.find('b').text())
    }, {
      silent: true
    });
    if (this.model.hasChanged()) {
      return this.model.save();
    }
  },
  openEditDialog: function() {
    var a;
    a = this.model.get("cls");
    if (a === "AnyActivity") {
      return window.editor.is_author && window.editor.widget_view.widget_custom_activity.propagate(this.model.id);
    } else {
      if (a === "HotelActivity") {
        return window.editor.is_author && window.editor.widget_view.widget_hotel.propagate(this.model.id);
      } else {
        return window.editor.widget_view.widget_place.edit(this.model.id);
      }
    }
  }
});

MiniActivityView = BaseActivityView.extend({
  tagName: "li",
  className: 'ac mini',
  events: {
    "click span.remove": "deleteActivity",
    "mouseenter": "activityMouseEnter",
    "mouseleave": "activityMouseLeave"
  },
  initialize: function() {
    BaseActivityView.prototype.initialize.apply(this, arguments);
    return this.template = _.template($("#mini-activity-template").html());
  }
});

ActivityLegView = Backbone.View.extend({
  tagName: 'li',
  className: 'moveTime',
  initialize: function() {
    this.template = _.template($("#activity-leg-template").html());
    this.model.bind("change", this.render, this);
    return this.model.bind("destroy", this.remove, this);
  },
  render: function() {
    var leg, me;
    leg = this.model.toJSON();
    this.$el.html(this.template({
      leg: leg
    }));
    me = this;
    this.$('.traffic-summary a').click(function() {
      return me.$el.toggleClass('expanded');
    });
    return this;
  },
  remove: function() {
    return this.$el.remove();
  }
});

Schedule = Backbone.Collection.extend({
  model: DayActivity,
  initialize: function() {
    this.url = "/api/plans/" + window.editor.plan_id + "/days/";
    return this.bind("reset", this.add_all_acs, this);
  },
  add_all_acs: function() {
    return this.each(function(day) {
      return day.add_all_acs();
    });
  },
  getDay: function(container, create) {
    var day;
    day = this.find(function(day) {
      return day.get("container") === container;
    });
    if (!day && create) {
      day = new DayActivity({
        id: _.uniqueId("" + editor.plan_id + "-"),
        container: container,
        note: ""
      }, {
        silent: true
      });
      this.add(day);
    }
    return day;
  },
  addDay: function() {
    var last_container, last_day, _ref;
    last_day = this.max(function(day) {
      return day.get('container');
    });
    last_container = (_ref = last_day != null ? last_day.get('container') : void 0) != null ? _ref : -1;
    return this.getDay(last_container + 1, true);
  },
  removeDay: function(day) {
    console.log("delete day " + (day.get('container')) + " and corresponding " + day.activities.length + " acs");
    day.activities.each(function(ac) {
      return ac.destroy();
    });
    this.remove(day, {
      silent: true
    });
    this.map(function(day, i) {
      return day.set('container', i, {
        silent: true
      });
    });
    return this.reset(this.models);
  },
  reorder: function() {
    var a;
    a = this.pluck("id");
    return $.ajax({
      type: "PUT",
      url: this.url + "?type=reorder",
      data: JSON.stringify(a),
      success: function(a) {
        return window.editor.plan_info_view.show_autosave_indicator();
      },
      error: function(a) {
        console.error("schedule reorder error", a);
        return window.editor.widget_view.widget_error_blocker.propagate();
      }
    });
  },
  hasNoActivity: function() {
    return this.every(function(dayAc) {
      return dayAc.activities.isEmpty();
    });
  },
  comparator: function(day) {
    return day.get("container");
  },
  get_scheduled_acs: function() {
    return _.flatten(this.map(function(day) {
      return day.activities.models;
    }));
  },
  get_cities_acs: function() {
    var acs, cities_acs, city_acs, cityi, _i, _len;
    acs = this.get_scheduled_acs();
    cities_acs = util.partition_by(acs, function(ac) {
      return ac.get_place().city_id;
    });
    for (cityi = _i = 0, _len = cities_acs.length; _i < _len; cityi = ++_i) {
      city_acs = cities_acs[cityi];
      _.each(city_acs, function(ac) {
        return ac.city_index = cityi;
      });
    }
    return cities_acs;
  },
  get_scheduled_cities: function() {
    var cities_acs;
    cities_acs = this.get_cities_acs();
    return _.map(cities_acs, function(city_acs, cityi) {
      var ac0, place;
      ac0 = city_acs[0];
      place = ac0.get_place();
      return {
        id: place.city_id,
        name: place.city_name,
        index: cityi,
        acs: city_acs,
        acs_num: city_acs.length
      };
    });
  },
  get_full_cities_promise: function() {
    var basic_cities, city_ids;
    basic_cities = this.get_scheduled_cities();
    city_ids = _.map(basic_cities, function(city) {
      return city.id;
    });
    return autoplan.get_cities_promise(city_ids).pipe(function(cities) {
      return _.map(cities, function(city, i) {
        return _.extend({}, city, basic_cities[i]);
      });
    });
  },
  get_render_acs: function(day_index, city_index) {
    var cacs, cities_acs, city_indexes, day, day_acs, days, days_acs, flags, sel_acs, _i, _ref, _ref1, _results;
    if (city_index == null) {
      city_index = null;
    }
    cities_acs = this.get_cities_acs();
    sel_acs = [];
    flags = (day_index === null ? 0 : 1) + "" + (city_index === null ? 0 : 1);
    switch (flags) {
      case '00':
      case '11':
        console.error('Bad args, day_index and city_index are both missing or both exist');
        return;
      case '01':
        cacs = cities_acs[city_index];
        day_index = cacs[0].get_container();
        city_indexes = [city_index];
        sel_acs = cacs;
        break;
      case '10':
        day = this.getDay(day_index);
        if (day && day.activities.length) {
          day_acs = day.activities.models;
          city_indexes = (function() {
            _results = [];
            for (var _i = _ref = day_acs[0].city_index, _ref1 = _.last(day_acs).city_index; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this);
          sel_acs = day_acs;
        } else {
          city_indexes = [];
        }
    }
    days_acs = util.partition_by(sel_acs, function(ac) {
      return ac.get_container();
    });
    days = _.map(days_acs, function(acs) {
      return day = {
        index: acs[0].get_container(),
        acs: acs
      };
    });
    return {
      day_index: day_index,
      city_indexes: city_indexes,
      days: days
    };
  }
});

DayView = Backbone.View.extend({
  tagName: 'dl',
  className: 'day',
  initialize: function() {
    this.$el.html($('#day-template').html());
    this.$no_hotel = this.$('li.no-hotel').detach();
    this.$el.data('model', this.model);
    this.info = window.editor.info;
    this.$info_container = this.$('dt');
    this.$day_container = this.$("dd > ul.acs");
    this.$mini_container = this.$('div.mini ul.acs');
    this.$btn_remove = this.$('a.del');
    this.info.bind('change:start_day', this.render_info, this);
    this.model.bind("change:aids", this.render_acs, this);
    if (window.editor.is_author) {
      this.$("#schedule-read-note").remove();
    } else {
      this.$("#schedule-edit-note").remove();
      this.$("#schedule-auto-arrange").remove();
    }
    return this.addToSortable();
  },
  events: {
    "click .optimize": "autoArrange",
    "click #schedule-zoom-day span": "zoom_day",
    'click a.del': 'deleteDay'
  },
  autoArrange: function() {
    var acs, day;
    day = this.model;
    acs = day.activities.models;
    return autoplan.plan_day_promise(acs).done(function(new_acs) {
      return day.reset_activities(new_acs, 1);
    });
  },
  update_collection: function($ul) {
    var acs, me;
    me = this;
    acs = _.map($('> li.ac', $ul), function(li) {
      var $li, ac, wp;
      $li = $(li);
      if ($li.hasClass('wp')) {
        wp = editor.wishlist.getByCid($li.data('cid'));
        return ac = wp.create_ac();
      } else {
        return ac = me.model.activities.getByCid($li.attr('id'));
      }
    });
    this.model.reset_activities(acs, 1);
    console.log(acs);
    return this.render();
  },
  get_day_stat: function() {
    var day_acs, distance, distances, duration, durations, missing_leg_acs, stay_hours, traffic_duration;
    day_acs = this.model.activities;
    missing_leg_acs = day_acs.filter(function(ac, i) {
      return i > 0 && !ac.leg.get('distance');
    });
    if (missing_leg_acs.length) {
      return null;
    }
    durations = day_acs.map(function(ac, i) {
      if (i === 0) {
        return 0;
      } else {
        return ac.leg.get('duration').value;
      }
    });
    distances = day_acs.map(function(ac, i) {
      if (i === 0) {
        return 0;
      } else {
        return ac.leg.get('distance').value;
      }
    });
    traffic_duration = util.sum(durations);
    stay_hours = util.sum(day_acs.map(function(ac) {
      return ac.get_stay_hours();
    }));
    duration = traffic_duration + stay_hours * 3600;
    distance = util.sum(distances);
    return {
      duration: {
        value: duration,
        text: util.toReadableHour(duration) + '小时'
      },
      distance: {
        value: distance,
        text: util.toReadableDistance(distance)
      }
    };
  },
  get_day_stat_promise: function() {
    var day, me, points, stat, stat_defer;
    me = this;
    stat_defer = $.Deferred();
    stat = this.get_day_stat();
    if (stat) {
      stat_defer.resolve(stat);
      return stat_defer;
    }
    day = this.model;
    points = day.activities.map(function(ac) {
      var place;
      place = ac.get_place();
      return {
        location: new LatLgt(place.glat, place.glgt),
        ac: ac
      };
    });
    console.log("getting day " + (day.get('container')) + " routing stats, " + points.length + " acs");
    editor.gs.get_routes_promise(points, google.maps.TravelMode.DRIVING).done(function(result) {
      _.each(result.legs, function(gleg, i) {
        var leg;
        leg = me.get_activity_leg(points[i].ac, points[i + 1].ac);
        return leg.set(me.gleg2leg_attr(gleg));
      });
      stat = me.get_day_stat();
      if (stat) {
        return stat_defer.resolve(stat);
      } else {
        return stat_defer.reject('stat: missing some legs');
      }
    }).fail(function(err) {
      return stat_defer.reject(err);
    });
    return stat_defer;
  },
  update_day_distance: function() {
    var me;
    me = this;
    return this.get_day_stat_promise().done(function(stat) {
      return me.$(".schedule-day-distance span").html(stat.duration.text);
    }).fail(function(err) {
      console.log(err);
      return me.$(".schedule-day-distance span").html('未知');
    });
  },
  deleteDay: function() {
    var day;
    day = this.model;
    if (editor.schedule.length === 1) {
      alert('不能删除最后一天');
      return;
    }
    return editor.confirm_box(this.$btn_remove, '真的要删除此天？将删除此天的所有活动', function() {
      return editor.schedule.removeDay(day);
    });
  },
  zoom_day_or_cancel: function() {
    if ($("#schedule-zoom-day").hasClass("zoomed")) {
      return window.editor.schedule_map_view.zoom_day(window.editor.schedule_view.currentOffset);
    } else {
      return window.editor.schedule_map_view.cancel_zoom_day(window.editor.schedule_view.currentOffset);
    }
  },
  zoom_day: function(ev) {
    $("#schedule-zoom-day").toggleClass("zoomed");
    return this.zoom_day_or_cancel();
  },
  refreshSortable: function() {
    return this.$('ul.acs').sortable('refresh');
  },
  addToSortable: function() {
    var me;
    if (!window.editor.is_author) {
      return;
    }
    console.log("day " + (this.model.get('container')) + " add to sortable");
    me = this;
    return this.$('ul.acs').sortable({
      items: 'li.ac',
      connectWith: "dl.day ul.acs",
      placeholder: "empty",
      helper: "clone",
      appendTo: "body",
      containment: "div.plan",
      beforeStop: function(ev, ui) {
        var $ul0, $ul1;
        $ul0 = $(ev.target);
        $ul1 = ui.placeholder.parent();
        if ($ul0.get(0) !== $ul1.get(0) && $ul0.parents('dl.day').get(0) === $ul1.parents('dl.day').get(0)) {
          return false;
        }
      },
      update: function(ev, ui) {
        if (ui.item.hasClass('ui-draggable')) {
          return;
        }
        if (ui.sender || ev.target !== ui.item.parent().get(0)) {
          return;
        }
        me.update_collection($(ev.target));
        return console.log("day " + (me.model.get('container')) + " sorted done");
      },
      remove: function(ev, ui) {
        var ac;
        ac = me.model.activities.getByCid(ui.item.attr("id"));
        ui.item.data("model", ac);
        me.update_collection($(ev.target));
        return console.log("day " + (me.model.get('container')) + " removed an item");
      },
      receive: function(ev, ui) {
        var ac;
        if (ui.item.hasClass('ui-draggable')) {
          me.update_collection($(ev.target));
          return console.log("day " + (me.model.get('container')) + " received wp done");
        } else {
          ac = ui.item.data("model");
          me.model.activities.add(ac, {
            silent: true
          });
          me.update_collection($(ev.target));
          return console.log("day " + (me.model.get('container')) + " received done");
        }
      }
    });
  },
  render_info: function() {
    var day, day_info, start_day;
    start_day = editor.info.get("start_day");
    day = NewDate(start_day);
    day.setDate(day.getDate() + this.model.get('container'));
    day_info = {
      container: this.model.get('container') + 1,
      date: "" + (day.getFullYear()) + "-" + (day.getMonth() + 1) + "-" + (day.getDate())
    };
    this.$info_container.find('.day').text(day_info.container);
    return this.$info_container.find('.date').text(day_info.date);
  },
  add_activity_view: function(ac) {
    var av, legv, mini_av;
    av = new ActivityView({
      model: ac,
      id: ac.cid
    });
    mini_av = new MiniActivityView({
      model: ac,
      id: ac.cid
    });
    if (ac.leg) {
      legv = new ActivityLegView({
        model: ac.leg,
        id: ac.leg.cid
      });
      this.$day_container.append(legv.render().el);
    }
    this.$day_container.append(av.render().el);
    this.$mini_container.append(mini_av.render().el);
    return this.refreshSortable();
  },
  get_activity_leg: function(ac0, ac1) {
    var get_leg_id, leg, leg_id;
    get_leg_id = function(ac0, ac1) {
      var ids;
      ids = _.map([ac0, ac1], function(ac) {
        var p;
        p = ac.get_place();
        return (new google.maps.LatLng(p.glat, p.glgt)).toUrlValue();
      });
      return ids.join(';');
    };
    leg_id = get_leg_id(ac0, ac1);
    leg = editor.info.legs[leg_id];
    if (!leg) {
      leg = editor.info.legs[leg_id] = new ActivityLeg({
        id: leg_id
      });
    }
    return leg;
  },
  gleg2leg_attr: function(gleg) {
    var attrs, steps;
    steps = _.map(gleg.steps, function(step) {
      return _.pick(step, 'instructions', 'travel_model');
    });
    return attrs = {
      distance: gleg.distance,
      duration: gleg.duration,
      steps: steps
    };
  },
  render_acs: function() {
    var last_ac, me;
    me = this;
    this.$day_container.empty();
    this.$mini_container.empty();
    last_ac = null;
    this.model.activities.each(function(ac, i) {
      ac.leg = last_ac ? me.get_activity_leg(last_ac, ac) : null;
      me.add_activity_view(ac);
      return last_ac = ac;
    });
    this.update_day_distance();
    return this.refreshSortable();
  },
  render: function() {
    console.log("DayView " + (this.model.get('container')) + " render", arguments);
    this.render_info();
    this.render_acs();
    return this;
  }
});

ScheduleView = Backbone.View.extend({
  el: ".plan",
  currentOffset: null,
  currentDayActivity: null,
  initialize: function() {
    this.info = window.editor.info;
    this.collection = window.editor.schedule;
    this.collection.bind("reset", this.addAll, this);
    this.collection.bind("add", this.addOne, this);
    this.$wb_container = $(".whiteboard-container");
    this.$map_container = $(".schedule-map-container");
    this.$days_container = this.$('.days');
    this.$place_filter = $(".place-filter", this.$wb_container);
    this.$source_filter = $(".source-filter", this.$wb_container);
    if (window.editor.is_author) {
      return this.$("#schedule-read-note").remove();
    } else {
      this.$("#schedule-edit-note").remove();
      return this.$("#schedule-auto-arrange").remove();
    }
  },
  events: {
    "click .prevDay": "calendar_prev",
    "click .nextDay": "calendar_next",
    'click .dayAdd': 'addDay'
  },
  addDayView: function(day) {
    var day_view;
    day_view = new DayView({
      model: day,
      id: day.cid
    });
    return this.$days_container.append(day_view.render().el);
  },
  addAll: function() {
    console.log("Reset all " + this.collection.length + " day views");
    this.$days_container.empty();
    this.collection.each(this.addDayView, this);
    return editor.main_view.reinit();
  },
  addOne: function(day) {
    console.log("Add day view " + (day.get('container')));
    this.addDayView(day);
    return editor.main_view.reinit();
  },
  addDay: function() {
    return this.collection.addDay();
  },
  calendar_to: function(offset) {
    if (offset < 0) {
      return;
    }
    this.currentOffset = offset;
    return editor.main_view.scroll_to_day(offset, true);
  },
  calendar_prev: function() {
    return editor.change_day_city(this.currentOffset - 1);
  },
  calendar_next: function() {
    return editor.change_day_city(this.currentOffset + 1);
  }
});

ScheduleMapView = Backbone.View.extend({
  tagName: "div",
  className: "map",
  events: {
    activity_enter: "activityMouseEnter",
    activity_leave: "activityMouseLeave"
  },
  _get_marker: function(aid) {
    return _.find(this.markers, function(m) {
      return m.aid === aid;
    });
  },
  activityMouseEnter: function(a, b) {
    var _ref;
    return (_ref = this._get_marker(b.aid)) != null ? _ref.setAnimation(google.maps.Animation.BOUNCE) : void 0;
  },
  activityMouseLeave: function(a, b) {
    var _ref;
    return (_ref = this._get_marker(b.aid)) != null ? _ref.setAnimation(null) : void 0;
  },
  initialize: function() {
    var map_options, me;
    me = this;
    this.schedule = editor.schedule;
    this.markers = [];
    this.polylines = [];
    this.dirRenderers = [];
    this.points = [];
    this.day_points = [];
    map_options = {
      zoom: 13,
      center: new google.maps.LatLng(0, 0),
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      scrollwheel: false,
      scaleControl: true,
      zoomControlOptions: {
        position: google.maps.ControlPosition.RIGHT_TOP
      },
      panControlOptions: {
        position: google.maps.ControlPosition.RIGHT_TOP
      },
      scaleControlOptions: {
        position: google.maps.ControlPosition.RIGHT_TOP
      },
      streetView: new google.maps.StreetViewPanorama(this.$el[0], {
        clickToGo: true,
        linksControl: true,
        addressControlOptions: {
          position: google.maps.ControlPosition.RIGHT_TOP
        },
        zoomControlOptions: {
          position: google.maps.ControlPosition.RIGHT_TOP
        },
        panControlOptions: {
          position: google.maps.ControlPosition.RIGHT_TOP
        },
        enableCloseButton: true,
        visible: false
      })
    };
    this.map = new google.maps.Map(this.$el[0], map_options);
    this.info_template = _.template($("#schedule-map-info-template").html());
    this.schedule.bind('reset change:aids', _.debounce(_.bind(this.reload, this), 1000));
    return $(".cityChoose").on("click", "a", function() {
      var city_index;
      city_index = $(this).data("index");
      if (city_index < 0) {
        me.render_cities();
      } else {
        editor.change_day_city(null, city_index);
      }
      return false;
    });
  },
  clearMap: function() {
    var dr, m, p, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    _ref = this.markers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      m.setMap(null);
    }
    _ref1 = this.polylines;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      p = _ref1[_j];
      p.setMap(null);
    }
    _ref2 = this.dirRenderers;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      dr = _ref2[_k];
      dr.setMap(null);
    }
    this.markers = [];
    this.polylines = [];
    return this.dirRenderers = [];
  },
  renderMarkers: function() {
    var color, day, last_marker, markers, me, mp, point, points, _i, _len, _ref, _results;
    me = this;
    this.clearMap();
    this.markers = (function() {
      var _i, _len, _ref, _results;
      _ref = this.points;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mp = _ref[_i];
        _results.push(this.draw_marker(mp));
      }
      return _results;
    }).call(this);
    last_marker = null;
    _ref = this.day_points;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      day = _ref[_i];
      if (!day.points.length) {
        last_marker = null;
        continue;
      }
      markers = (function() {
        var _j, _len1, _ref1, _results1;
        _ref1 = day.points;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          mp = _ref1[_j];
          _results1.push(this.draw_marker(mp));
        }
        return _results1;
      }).call(this);
      color = get_color(day.highlight ? 0 : -1);
      if (last_marker) {
        this.polylines.push(this.drawPolyline([last_marker, markers[0]], get_color(-1)));
      }
      last_marker = _.last(markers);
      if (!day.highlight) {
        this.polylines.push(this.drawPolyline(markers, color));
      } else {
        points = (function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = day.points;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            mp = _ref1[_j];
            _results1.push(point = {
              location: new LatLgt(mp.lat, mp.lgt),
              mp: mp
            });
          }
          return _results1;
        })();
        console.log("render: getting routes, " + points.length + " points");
        editor.gs.get_routes_promise(points, google.maps.TravelMode.DRIVING).then(function(result) {
          return me.render_directions(result.dirsResults);
        });
      }
      _results.push(this.markers = this.markers.concat(markers));
    }
    return _results;
  },
  draw_marker: function(mp) {
    var get_icon, icon, marker, marker_opts, me;
    me = this;
    get_icon = function(pin_letter, color_index) {
      var color, icon, icon_url;
      color = get_color(color_index);
      color = color.substr(1);
      icon_url = get_icon_url(pin_letter, color);
      return icon = new google.maps.MarkerImage(icon_url, new google.maps.Size(40, 37), new google.maps.Point(0, 0), new google.maps.Point(10, 34));
    };
    marker_opts = _.extend({}, mp, {
      map: this.map,
      position: new google.maps.LatLng(mp.lat, mp.lgt)
    });
    marker = new google.maps.Marker(marker_opts);
    switch (mp.type) {
      case 'city':
        icon = get_icon(mp.pin_letter, -1);
        google.maps.event.addListener(marker, "click", function() {
          return editor.change_day_city(null, this.index);
        });
        break;
      default:
        icon = get_icon(mp.pin_letter, mp.highlight ? 1 : -1);
        google.maps.event.addListener(marker, "click", function() {
          return console.log('click', this);
        });
    }
    marker.setIcon(icon);
    if (mp.highlight) {
      marker.setZIndex(1000);
    }
    return marker;
  },
  drawPolyline: function(markers, color) {
    var polyline;
    polyline = new google.maps.Polyline({
      path: _.pluck(markers, "position"),
      strokeColor: color,
      strokeOpacity: 1,
      strokeWeight: 3
    });
    polyline.setMap(this.map);
    return polyline;
  },
  render_directions: function(directionsResults) {
    var dirRenderer, directionsResult, dr, _i, _len, _ref;
    _ref = this.dirRenderers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dr = _ref[_i];
      dr.setMap(null);
    }
    return this.dirRenderers = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = directionsResults.length; _j < _len1; _j++) {
        directionsResult = directionsResults[_j];
        _results.push(dirRenderer = new google.maps.DirectionsRenderer({
          directions: directionsResult,
          hideRouteList: true,
          map: this.map,
          panel: null,
          preserveViewport: true,
          suppressInfoWindows: true,
          suppressMarkers: true,
          suppressBicyclingLayer: true,
          polylineOptions: {
            strokeWeight: 3,
            strokeColor: get_color(0)
          }
        }));
      }
      return _results;
    }).call(this);
  },
  render: function() {
    console.log('map render');
    this.resize();
    this.renderInfo(null);
    this.renderMarkers();
    return this.fitBounds(this.markers);
  },
  renderInfo: function(day) {
    var ci, cities, city_items, me, total_acs_num, _i, _len, _ref;
    me = this;
    cities = this.schedule.get_scheduled_cities();
    city_items = _.map(cities, function(city) {
      return _.pick(city, ['name', 'index', 'acs_num']);
    });
    total_acs_num = util.sum(_.pluck(cities, 'acs_num'));
    city_items = [
      {
        name: '全国',
        index: -1,
        acs_num: total_acs_num
      }
    ].concat(city_items);
    _ref = me.city_indexes || [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ci = _ref[_i];
      city_items[ci + 1]["class"] = 'sel';
    }
    return $('.cityChoose').empty().append(me.info_template({
      items: city_items
    }));
  },
  fitBounds: function(markers, pan) {
    var bounds, m, map, zoom, _i, _len;
    map = this.map;
    if (markers.length > 1) {
      bounds = new google.maps.LatLngBounds;
      for (_i = 0, _len = markers.length; _i < _len; _i++) {
        m = markers[_i];
        bounds.extend(m.position);
      }
      if (pan) {
        return map.panToBounds(bounds);
      } else {
        return map.fitBounds(bounds);
      }
    } else if (markers.length === 1) {
      map.setCenter(markers[0].position);
      zoom = markers[0].type === 'city' ? 7 : 12;
      return map.setZoom(zoom);
    }
  },
  resize: function() {
    console.log('resize map');
    return google.maps.event.trigger(this.map, "resize");
  },
  get_city_mp: function(city, city_index) {
    var mp;
    return mp = {
      type: 'city',
      lat: city.glat,
      lgt: city.glgt,
      title: city.name,
      slug: city.id,
      pin_letter: city_index + 1 + '',
      index: city_index
    };
  },
  get_ac_mp: function(ac, highlight) {
    var container, mp, place;
    container = ac.get_container();
    place = ac.get_place();
    return mp = {
      lat: place.glat,
      lgt: place.glgt,
      title: place.name,
      aid: ac.get('id'),
      slug: place.id,
      container: container,
      pin_letter: ac.pin_letter,
      highlight: highlight
    };
  },
  render_cities: function() {
    var me;
    me = this;
    return this.schedule.get_full_cities_promise().then(function(cities) {
      var new_cities;
      new_cities = util.uniq_stable(cities, 'id');
      me.day_points = [];
      me.points = _.map(new_cities, function(city, i) {
        return me.get_city_mp(city, i);
      });
      me.city_indexes = [-1];
      return me.render();
    });
  },
  render_acs: function(hl_day_index, hl_city_indexes, days) {
    var me;
    me = this;
    console.log('map render_acs', 'day', hl_day_index, 'city', hl_city_indexes);
    this.points = [];
    this.day_points = _.map(days, function(day) {
      var day_index;
      day_index = day.index;
      return {
        highlight: day_index === hl_day_index,
        day_index: day_index,
        points: _.map(day.acs, function(ac) {
          var highlight;
          highlight = day_index === hl_day_index && _.contains(hl_city_indexes, ac.city_index);
          return me.get_ac_mp(ac, highlight);
        })
      };
    });
    this.city_indexes = hl_city_indexes;
    return this.render();
  },
  zoom_day: function(day_index) {
    var day_markers;
    day_markers = _.filter(this.markers, function(m) {
      return m.container === day_index;
    });
    console.log('zoom_day', day_index, 'markers', day_markers);
    return this.fitBounds(day_markers);
  },
  cancel_zoom_day: function() {
    return this.fitBounds(this.markers);
  },
  reload: function() {
    var acs_res;
    acs_res = this.schedule.get_render_acs(editor.get_current_offset());
    return this.render_acs(acs_res.day_index, acs_res.city_indexes, acs_res.days);
  }
});

WidgetPlaceView = Backbone.View.extend({
  el: "#widget-place-view",
  events: {
    "click .info .city": "nav_up",
    "click .info .prev": "prev",
    "click .info .desc .expand": "desc_expand",
    "click .info .desc .shrink": "desc_shrink",
    "click .place-add": "next",
    "click .place-recommend": "create_recommendation",
    "click .recommend button": "create_recommendation",
    "click .note .btn": "update_info",
    "click .comment-collapse": "toggle_comments",
    "click .recommend .label_radio": "changge_ron_roff",
    "mouseenter .comment-icon-index > div": "slide_photo"
  },
  api_base: "/api/",
  img_base: "http://img.tukeq.com/",
  scrollable: !0,
  initialize: function() {
    this.cache = {};
    this.$error_page = $("<h3 class=\"connection-error\">连接失败，请检查网络。</h3><div class=\"close\"></div>");
    this.place_template = _.template($("#widget-place-inner-template").html());
    this.recommendation_template = _.template($("#widget-place-recommendation-template").html());
    $(this.el).height("auto");
    return window.editor.is_author && $(this.el).addClass("is-author");
  },
  propagate: function(place_id, b) {
    window.editor.widget_view.loading();
    b = b || "up";
    window.editor.widget_view.slideIn(this, b);
    if (this.current_activity) {
      window.editor.widget_view.nav_history.push({
        activity_id: this.current_activity.id,
        view: this
      });
    } else {
      window.editor.widget_view.nav_history.push({
        slug: place_id,
        view: this
      });
    }
    this.current_place = place_id;
    this.current_place_type = this.current_activity.get("place_type");
    return this.render();
  },
  edit: function(aid, b) {
    var ac;
    b = b || "up";
    ac = window.editor.info.activities[aid];
    this.current_activity = ac;
    return this.propagate(ac.get("place_id"), b);
  },
  hide: function() {
    var a;
    a = this.cache[this.current_place];
    a && a.el.detach();
    this.$error_page.detach();
    return this.current_activity = null;
  },
  changge_ron_roff: function(a) {
    this.$(".recommend .label_radio").removeClass("r_on");
    return $(a.currentTarget).addClass("r_on");
  },
  render: function() {
    var a, b, c, d, e, f;
    a = this;
    b = this.cache[this.current_place];
    if (!b) {
      this.fetch();
      return;
    }
    c = $(".note textarea", b.el);
    d = $(".info .prev", b.el);
    e = window.editor.info.places()[this.current_place];
    if (window.editor.widget_view.nav_history.length > 1) {
      d.show();
    } else {
      d.hide();
    }
    if (e) {
      $(this.el).addClass("is-activity");
    } else {
      $(this.el).removeClass("is-activity");
    }
    this.current_activity && c.val(this.current_activity.get("note"));
    $(this.el).append(b.el);
    f = this.$(".comment-photo-item img").attr("src") || "";
    $("<img/>").attr("src", f).load(function() {
      return a.slide_photo();
    });
    this.update_recommendation();
    return window.editor.widget_view.loaded();
  },
  fetch: function() {
    var me;
    me = this;
    return $.get(this.api_base + this.current_place_type + "s/" + this.current_place).success(function(b) {
      b.comments = [];
      b.comments = _.filter(b.comments, function(me) {
        return me.photo_name;
      }).splice(0, 12);
      _.each(b.comments, function(b) {
        return b.photo_url = me.img_base + b.photo_name;
      });
      b.intro_short = b.intro.slice(0, 75) + " ... <span class=\"expand\">(展开)</span>";
      b.intro = b.intro + "<span class=\"shrink\"> (收起)</span>";
      b.tourist_info = me.prepare_tourist_info(b);
      me.cache[me.current_place] = {
        data: b,
        el: $(me.place_template({
          place: b
        }))
      };
      return me.render();
    }).error(function(b) {
      console.error("fetch place error", b);
      return me.connection_error();
    });
  },
  connection_error: function() {
    this.$error_page.appendTo($(this.el));
    return window.editor.widget_view.loaded();
  },
  prepare_tourist_info: function(a) {
    var b;
    b = [];
    a.address && b.push({
      title: "地址",
      info: a.address
    });
    a.website && b.push({
      title: "相关网站",
      info: a.website
    });
    a.price && b.push({
      title: "价格",
      info: a.price
    });
    a.arrival && b.push({
      title: "如何抵达",
      info: a.arrival
    });
    a.opentime && b.push({
      title: "开放时间",
      info: a.opentime
    });
    a.phone && b.push({
      title: "电话号码",
      info: a.phone
    });
    return b;
  },
  desc_expand: function() {
    var a;
    a = this.cache[this.current_place].data;
    return this.$(".info .desc").html(a.intro);
  },
  desc_shrink: function() {
    var a;
    a = this.cache[this.current_place].data;
    return this.$(".info .desc").html(a.intro_short);
  },
  update_info: function() {
    var a;
    a = this;
    return this.current_activity.save({
      note: $.trim(this.$(".note textarea").val())
    }, {
      success: function() {
        return a.$(".note .message").html("已保存").show().delay(3e3).fadeOut(1e3);
      }
    });
  },
  reload: function(a) {
    var b;
    b = window.editor.info.activities[a];
    window.editor.widget_view.nav_history.pop();
    window.editor.widget_view.nav_history.push({
      activity_id: a,
      view: this
    });
    this.current_activity = b;
    this.$(".recommend textarea").val("");
    return this.update_recommendation();
  },
  toggle_comments: function(a) {
    var b;
    if (a === "up") {
      this.$(".comment-container, .comment-photo-container, .comment-icon-index").slideUp();
    } else {
      if (a === "down") {
        this.$(".comment-container, .comment-photo-container, .comment-icon-index").slideDown();
      } else {
        this.$(".comment-container, .comment-photo-container, .comment-icon-index").slideToggle();
      }
    }
    b = this;
    return setTimeout((function() {
      if (b.$(".comment-container").data("init")) {
        return;
      }
      b.$(".comment-container").data("init", !0);
      return b.slide_photo();
    }), 100);
  },
  slide_photo: function(a) {
    var b, c, idx;
    idx = (a ? $(a.currentTarget).data("index") : 0);
    a && $(a.currentTarget).siblings().removeClass("active").end().addClass("active");
    this.$(".comment-item").hide().eq(idx).show();
    b = this.$(".comment-photo-item").eq(idx);
    if (!b.length) {
      return;
    }
    c = this.$(".comment-photo-container").width() / 2 - b.width() / 2 - b.position().left;
    return this.$(".comment-photos").clearQueue().animate({
      left: c + "px"
    }, 300, "linear");
  },
  update_recommendation: function() {
    var a;
    a = this.$(".recommendation-frame");
    if (this.current_activity) {
      $(".recommendation-container", a).empty().append(this.recommendation_template({
        list: this.current_activity.recommendations.toJSON()
      })).show();
      if (this.current_activity.recommendations.length > 0 || !window.editor.is_author) {
        $(".recommend .label_radio", a).show();
        return a.show();
      } else {
        return a.hide();
      }
    } else {
      if (window.editor.is_author) {
        return this.$(".recommendation-frame").hide();
      } else {
        this.$(".recommend .label_radio", a).hide();
        return a.show();
      }
    }
  },
  create_recommendation: function(a) {
    var b, c, d, e, f;
    b = this;
    c = this.$(".recommend textarea");
    d = $(this.$(".recommend .message"));
    e = $.trim(c.val());
    this.toggle_comments("up");
    if (!e) {
      c.focus();
      d.html("请输入推荐理由").show().delay(2e3).fadeOut(1e3);
      return;
    }
    f = {
      place_slug: this.current_place,
      content: e,
      recommend: this.$(".r_on").hasClass("rec")
    };
    if (this.current_activity) {
      return this.current_activity.recommendations.create(f, {
        success: function(a, d, e) {
          c.val("");
          return b.update_recommendation();
        }
      });
    } else {
      return this.create_activity(f);
    }
  },
  nav_up: function() {
    switch (this.cache[this.current_place].data.place_class) {
      case "Country":
        return window.editor.widget_view.widget_country.propagate(this.current_place, "left");
      case "Area":
        return window.editor.widget_view.widget_city.propagate(this.current_place, "left");
      case "Place":
        return window.editor.widget_view.widget_city.propagate(this.cache[this.current_place].data.parent_slug, "left");
      default:
        return console.error("place class not supported", this.current_place);
    }
  },
  prev: function() {
    return window.editor.widget_view.nav_prev();
  },
  next: function() {
    return this.create_activity();
  },
  create_activity: function(a) {
    var b, c, d;
    b = this;
    c = this.cache[this.current_place].data;
    d = {
      plan_day_id: window.editor.wb_day_id,
      cls: c.activity_class,
      place_slug: c.slug,
      place_name: c.name_zh,
      place_name_en: c.name_en,
      place_parent_slug: c.parent_slug
    };
    a && (d.recommendation = [a]);
    (window.editor.is_author || a) && window.editor.whiteboard.create(d, {
      success: function(a) {
        return b.reload(a.id);
      }
    });
    $(this.el).addClass("is-activity");
    return this.$(".column-right .msg span").html("已成功添加！").show().delay(2e3).fadeOut(1e3);
  }
});

WidgetErrorBlockerView = Backbone.View.extend({
  el: "#widget-error-blocker",
  events: {
    "click .refresh": "refresh_page",
    "click .cancel": "countdown_stop"
  },
  initialize: function() {
    return this.$countdown = this.$(".countdown");
  },
  propagate: function() {
    window.editor.widget_view.slideIn(this, "down");
    return this.render();
  },
  render: function() {
    var a;
    a = this;
    this.time_left = 20;
    return this.ticker = window.setInterval(function() {
      return a.countdown_tick();
    }, 1e3);
  },
  countdown_tick: function() {
    this.$countdown.html(this.time_left--);
    return this.time_left < 0 && this.refresh_page();
  },
  countdown_stop: function() {
    window.clearInterval(this.ticker);
    return window.editor.widget_view.close();
  },
  refresh_page: function() {
    return window.location.reload();
  },
  hide: function() {
    return window.clearInterval(this.ticker);
  }
});
