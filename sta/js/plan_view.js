// Generated by CoffeeScript 1.3.3
var DayMapView, PlanView;

PlanView = (function() {

  function PlanView(days) {
    _.map(days, function(day) {
      return new DayMapView(day.mps, "MapCanvas_" + day.container);
    });
  }

  return PlanView;

})();

DayMapView = (function() {

  function DayMapView(mps, canvas) {
    var mapOptions;
    mapOptions = {
      zoom: 8,
      streetViewControl: false,
      center: new google.maps.LatLng(0, 0),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    this.mps = mps;
    this.map = new google.maps.Map($("." + canvas)[0], mapOptions);
    this.dirRenderers = [];
    this.show();
  }

  DayMapView.prototype.get_icon_url = function(pos) {
    var pos_str, url;
    pos_str = (pos === -1 ? "" : pos);
    url = "https://chart.googleapis.com/chart?chst=d_map_pin_letter_withshadow&chld=" + pos_str + "|3b8d1f|000000";
    return "http://thumb.wowpad.cn/thumb?format=png&src=" + (encodeURIComponent(url));
  };

  DayMapView.prototype.render_directions = function(directionsResults) {
    var dirRenderer, directionsResult, dr, _i, _len, _ref;
    _ref = this.dirRenderers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dr = _ref[_i];
      dr.setMap(null);
    }
    return this.dirRenderers = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = directionsResults.length; _j < _len1; _j++) {
        directionsResult = directionsResults[_j];
        _results.push(dirRenderer = new google.maps.DirectionsRenderer({
          directions: directionsResult,
          hideRouteList: true,
          map: this.map,
          panel: null,
          preserveViewport: true,
          suppressInfoWindows: true,
          suppressMarkers: true,
          suppressBicyclingLayer: true,
          polylineOptions: {
            strokeWeight: 3,
            strokeColor: '#3c8dc5'
          }
        }));
      }
      return _results;
    }).call(this);
  };

  DayMapView.prototype.fitBounds = function(markers, pan) {
    var bounds, m, map, zoom, _i, _len;
    map = this.map;
    if (markers.length > 1) {
      bounds = new google.maps.LatLngBounds;
      for (_i = 0, _len = markers.length; _i < _len; _i++) {
        m = markers[_i];
        bounds.extend(m.position);
      }
      if (pan) {
        return map.panToBounds(bounds);
      } else {
        return map.fitBounds(bounds);
      }
    } else if (markers.length === 1) {
      map.setCenter(markers[0].position);
      zoom = markers[0].type === 'city' ? 7 : 12;
      return map.setZoom(zoom);
    }
  };

  DayMapView.prototype.draw_polyline = function(markers, color) {
    var polyline;
    polyline = new google.maps.Polyline({
      path: _.pluck(markers, "position"),
      strokeColor: color,
      strokeOpacity: 1,
      strokeWeight: 3
    });
    polyline.setMap(this.map);
    return polyline;
  };

  DayMapView.prototype.show = function() {
    var gs, markers, me, points;
    me = this;
    markers = _.map(this.mps, function(mp, i) {
      var icon, marker;
      icon = new google.maps.MarkerImage(me.get_icon_url(i + 1));
      return marker = new google.maps.Marker({
        map: me.map,
        position: new google.maps.LatLng(mp.lat, mp.lgt),
        icon: icon,
        title: mp.name
      });
    });
    this.fitBounds(markers);
    points = _.map(this.mps, function(mp) {
      return {
        location: new LatLgt(mp.lat, mp.lgt)
      };
    });
    gs = new GoogleService();
    return gs.get_routes_promise(points, google.maps.TravelMode.DRIVING).done(function(result) {
      return me.render_directions(result.dirsResults);
    }).fail(function() {
      console.log("Fail to draw routes, draw polyline instead");
      return me.draw_polyline(markers, '#000');
    });
  };

  return DayMapView;

})();
